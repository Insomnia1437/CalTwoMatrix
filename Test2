// Test.cpp : 定义控制台应用程序的入口点。
//
// Main.cpp : 定义控制台应用程序的入口点。
//

#include "stdafx.h"
#include <iostream>
#include <stdio.h>
#include "cv.h"
#include "highgui.h"
#include <cxcore.h>
#define NUM 18
void printMat(CvMat *);
CvMat* getMatrix(char *);
void getCofficient1(CvMat *,CvMat *,CvMat *);
void getCofficient2(CvMat *,CvMat *,CvMat *);
void getCofficient3(CvMat *,CvMat *,CvMat *);
//void getCofficient4(CvMat *,CvMat *,CvMat *);
void getSrcs1(CvMat *,CvMat *,CvMat *,CvMat *);
void getSrcs2(CvMat *,CvMat *,CvMat *,CvMat *);
void getSrcs3(CvMat *,CvMat *,CvMat *,CvMat *);
//void getSrcs4(CvMat *,CvMat *,CvMat *,CvMat *);
//利用最小二乘法，根据多组点计算kinect坐标到世界坐标的变换矩阵
//变换矩阵为4*4
using namespace std;
using namespace cv;

void printMat(CvMat *M,int rows,int cols)
{
	int i,j;
	for(i=0;i<rows;i++)
	{
		for(j=0;j<cols;j++)
		{
			cout<<CV_MAT_ELEM(*M,double,i,j)<<"\t";
		}
		cout<<endl;
	}
	cout<<endl;
}
//从文件中获取kinect和世界坐标系点坐标
CvMat* getMatrix(char *filename)
{
	FILE *fp = NULL;
	int i=0;
	CvMat *M = cvCreateMat(NUM,3,CV_64FC1);
	cvSetZero(M);
	double a[3]={0,0,0};
	fp = fopen(filename,"r");
	if(fp == NULL)
	{
		cout<<"can not open the file"<<endl;
		exit(-1);
	}
	for(i=0;i<NUM;i++)
	{
		fscanf(fp,"%lf%lf%lf",&a[0],&a[1],&a[2]);
		CV_MAT_ELEM(*M,double,i,0)=a[0];
		CV_MAT_ELEM(*M,double,i,1)=a[1];
		CV_MAT_ELEM(*M,double,i,2)=a[2];
	}
	//cvSave("M.txt",M);
	return M;
}


void getCofficient1(CvMat* left,CvMat* right,CvMat *result)
{
	double a11,a12,a13,a14;//变换矩阵的第一行
	double a0,a1,a2,a3;//最小二乘法方程的系数
	CvMat *src1 = cvCreateMat(4,4,CV_64FC1);
	CvMat *src2 = cvCreateMat(4,1,CV_64FC1);
	CvMat *dst = cvCreateMat(4,1,CV_64FC1);
//	cout<<"in getCofficient1"<<endl;
	getSrcs1(left,right,src1,src2);
//	printMat(src1,4,4);
//	printMat(src2,4,1);
	cvInvert(src1,src1);//求src1的逆矩阵，然后src2左乘之，得到dst
//	printMat(src1,4,4);
	cvGEMM(src1,src2,1,NULL,1,dst);
//	printMat(src2,4,1);
//	printMat(dst,4,1);
//	cvDiv(src1,src2,dst,1);
	a0 = CV_MAT_ELEM(*dst,double,0,0);
	a1 = CV_MAT_ELEM(*dst,double,1,0);
	a2 = CV_MAT_ELEM(*dst,double,2,0);
	a3 = CV_MAT_ELEM(*dst,double,3,0);
	
	a13 = 1/a3;
	a12 = -a1*a13;
	a11 = -a0*a13;
	a14 = -a2*a13;

//	cout<<"a11: "<<a11<<"\ta12: "<<a12<<"\ta13: "<<a13<<"\ta14: "<<a14<<endl;
	
	CV_MAT_ELEM(*result,double,0,0) = a11;
	CV_MAT_ELEM(*result,double,0,1) = a12;
	CV_MAT_ELEM(*result,double,0,2) = a13;
	CV_MAT_ELEM(*result,double,0,3) = a14;
}
void getCofficient2(CvMat *left,CvMat *right,CvMat *result)
{
	double a21,a22,a23,a24;//变换矩阵的第二行
	double a0,a1,a2,a3;//最小二乘法方程的系数
	CvMat *src1 = cvCreateMat(4,4,CV_64FC1);
	CvMat *src2 = cvCreateMat(4,1,CV_64FC1);
	CvMat *dst = cvCreateMat(4,1,CV_64FC1);

	getSrcs2(left,right,src1,src2);
	cvInvert(src1,src1);//求src1的逆矩阵，然后src2左乘之，得到dst
	cvGEMM(src1,src2,1,NULL,1,dst);
	a0 = CV_MAT_ELEM(*dst,double,0,0);
	a1 = CV_MAT_ELEM(*dst,double,1,0);
	a2 = CV_MAT_ELEM(*dst,double,2,0);
	a3 = CV_MAT_ELEM(*dst,double,3,0);
	
	a23 = 1/a3;
	a22 = -a1*a23;
	a21 = -a0*a23;
	a24 = -a2*a23;
//	cout<<"a21:"<<a21<<"\ta22"<<a22<<"\ta23"<<a23<<"\ta24"<<a24<<endl;
	
	CV_MAT_ELEM(*result,double,1,0) = a21;
	CV_MAT_ELEM(*result,double,1,1) = a22;
	CV_MAT_ELEM(*result,double,1,2) = a23;
	CV_MAT_ELEM(*result,double,1,3) = a24;
}

void getCofficient3(CvMat *left,CvMat *right,CvMat *result)
{
	double a31,a32,a33,a34;//变换矩阵的第三行
	double a0,a1,a2,a3;//最小二乘法方程的系数
	CvMat *src1 = cvCreateMat(4,4,CV_64FC1);
	CvMat *src2 = cvCreateMat(4,1,CV_64FC1);
	CvMat *dst = cvCreateMat(4,1,CV_64FC1);

	getSrcs3(left,right,src1,src2);
	cvInvert(src1,src1);//求src1的逆矩阵，然后src2左乘之，得到dst
	cvGEMM(src1,src2,1,NULL,1,dst);
//	cvDiv(src1,src2,dst,1);
	a0 = CV_MAT_ELEM(*dst,double,0,0);
	a1 = CV_MAT_ELEM(*dst,double,1,0);
	a2 = CV_MAT_ELEM(*dst,double,2,0);
	a3 = CV_MAT_ELEM(*dst,double,3,0);
	
	a33 = 1/a3;
	a32 = -a1*a33;
	a31 = -a0*a33;
	a34 = -a2*a33;
	
//	cout<<"a31:"<<a31<<"\ta32"<<a32<<"\ta33"<<a33<<"\ta34"<<a34<<endl;

	CV_MAT_ELEM(*result,double,2,0) = a31;
	CV_MAT_ELEM(*result,double,2,1) = a32;
	CV_MAT_ELEM(*result,double,2,2) = a33;
	CV_MAT_ELEM(*result,double,2,3) = a34;
}

/**
src1矩阵
[
Σxi^2	Σxiyi	Σui
Σxiyi	Σyi^2	Σyiui
Σxiui	Σyiui	Σui^2
					]
*/
void getSrcs1(CvMat *left,CvMat *right,CvMat *src1,CvMat *src2)
{
	cvSetZero(src1);
	cvSetZero(src2);
	int i=0;
	for(i=0;i<NUM;i++)
	{
			CV_MAT_ELEM(*src1,double,0,0) += CV_MAT_ELEM(*left,double,i,0) * CV_MAT_ELEM(*left,double,i,0);
			CV_MAT_ELEM(*src1,double,0,1) += CV_MAT_ELEM(*left,double,i,0) * CV_MAT_ELEM(*left,double,i,1);
			CV_MAT_ELEM(*src1,double,0,2) += CV_MAT_ELEM(*left,double,i,0);
			CV_MAT_ELEM(*src1,double,0,3) += CV_MAT_ELEM(*left,double,i,0) * CV_MAT_ELEM(*right,double,i,0);
			
			CV_MAT_ELEM(*src1,double,1,0) += CV_MAT_ELEM(*left,double,i,0) * CV_MAT_ELEM(*left,double,i,1);
			CV_MAT_ELEM(*src1,double,1,1) += CV_MAT_ELEM(*left,double,i,1) * CV_MAT_ELEM(*left,double,i,1);
			CV_MAT_ELEM(*src1,double,1,2) += CV_MAT_ELEM(*left,double,i,1);
			CV_MAT_ELEM(*src1,double,1,3) += CV_MAT_ELEM(*left,double,i,1) * CV_MAT_ELEM(*right,double,i,0);
			
			CV_MAT_ELEM(*src1,double,2,0) += CV_MAT_ELEM(*left,double,i,0);
			CV_MAT_ELEM(*src1,double,2,1) += CV_MAT_ELEM(*left,double,i,1);
			CV_MAT_ELEM(*src1,double,2,2) = NUM;
			CV_MAT_ELEM(*src1,double,2,3) += CV_MAT_ELEM(*right,double,i,0);
			
			CV_MAT_ELEM(*src1,double,3,0) += CV_MAT_ELEM(*left,double,i,0) * CV_MAT_ELEM(*right,double,i,0);
			CV_MAT_ELEM(*src1,double,3,1) += CV_MAT_ELEM(*left,double,i,1) * CV_MAT_ELEM(*right,double,i,0);
			CV_MAT_ELEM(*src1,double,3,2) += CV_MAT_ELEM(*right,double,i,0);
			CV_MAT_ELEM(*src1,double,3,3) += CV_MAT_ELEM(*right,double,i,0) * CV_MAT_ELEM(*right,double,i,0);
			
			
			
			CV_MAT_ELEM(*src2,double,0,0) += CV_MAT_ELEM(*left,double,i,0) * CV_MAT_ELEM(*left,double,i,2);
			CV_MAT_ELEM(*src2,double,1,0) += CV_MAT_ELEM(*left,double,i,1) * CV_MAT_ELEM(*left,double,i,2);
			CV_MAT_ELEM(*src2,double,2,0) += CV_MAT_ELEM(*left,double,i,2);
			CV_MAT_ELEM(*src2,double,3,0) += CV_MAT_ELEM(*left,double,i,2) * CV_MAT_ELEM(*right,double,i,0);
		
	}
	
}

void getSrcs2(CvMat *left,CvMat *right,CvMat *src1,CvMat *src2)
{
	cvSetZero(src1);
	cvSetZero(src2);
	int i=0;
	for(i=0;i<NUM;i++)
	{	
			CV_MAT_ELEM(*src1,double,0,0) += CV_MAT_ELEM(*left,double,i,0) * CV_MAT_ELEM(*left,double,i,0);
			CV_MAT_ELEM(*src1,double,0,1) += CV_MAT_ELEM(*left,double,i,0) * CV_MAT_ELEM(*left,double,i,1);
			CV_MAT_ELEM(*src1,double,0,2) += CV_MAT_ELEM(*left,double,i,0);
			CV_MAT_ELEM(*src1,double,0,3) += CV_MAT_ELEM(*left,double,i,0) * CV_MAT_ELEM(*right,double,i,1);
			
			CV_MAT_ELEM(*src1,double,1,0) += CV_MAT_ELEM(*left,double,i,0) * CV_MAT_ELEM(*left,double,i,1);
			CV_MAT_ELEM(*src1,double,1,1) += CV_MAT_ELEM(*left,double,i,1) * CV_MAT_ELEM(*left,double,i,1);
			CV_MAT_ELEM(*src1,double,1,2) += CV_MAT_ELEM(*left,double,i,1);
			CV_MAT_ELEM(*src1,double,1,3) += CV_MAT_ELEM(*left,double,i,1) * CV_MAT_ELEM(*right,double,i,1);
			
			CV_MAT_ELEM(*src1,double,2,0) += CV_MAT_ELEM(*left,double,i,0);
			CV_MAT_ELEM(*src1,double,2,1) += CV_MAT_ELEM(*left,double,i,1);
			CV_MAT_ELEM(*src1,double,2,2) = NUM;
			CV_MAT_ELEM(*src1,double,2,3) += CV_MAT_ELEM(*right,double,i,1);
			
			CV_MAT_ELEM(*src1,double,3,0) += CV_MAT_ELEM(*left,double,i,0) * CV_MAT_ELEM(*right,double,i,1);
			CV_MAT_ELEM(*src1,double,3,1) += CV_MAT_ELEM(*left,double,i,1) * CV_MAT_ELEM(*right,double,i,1);
			CV_MAT_ELEM(*src1,double,3,2) += CV_MAT_ELEM(*right,double,i,1);
			CV_MAT_ELEM(*src1,double,3,3) += CV_MAT_ELEM(*right,double,i,1) * CV_MAT_ELEM(*right,double,i,1);
			
			
			
			CV_MAT_ELEM(*src2,double,0,0) += CV_MAT_ELEM(*left,double,i,0) * CV_MAT_ELEM(*left,double,i,2);
			CV_MAT_ELEM(*src2,double,1,0) += CV_MAT_ELEM(*left,double,i,1) * CV_MAT_ELEM(*left,double,i,2);
			CV_MAT_ELEM(*src2,double,2,0) += CV_MAT_ELEM(*left,double,i,2);
			CV_MAT_ELEM(*src2,double,3,0) += CV_MAT_ELEM(*left,double,i,2) * CV_MAT_ELEM(*right,double,i,1);
			

	}
	
}

void getSrcs3(CvMat *left,CvMat *right,CvMat *src1,CvMat *src2)
{
	cvSetZero(src1);
	cvSetZero(src2);
	int i=0;
	for(i=0;i<NUM;i++)
	{

			CV_MAT_ELEM(*src1,double,0,0) += CV_MAT_ELEM(*left,double,i,0) * CV_MAT_ELEM(*left,double,i,0);
			CV_MAT_ELEM(*src1,double,0,1) += CV_MAT_ELEM(*left,double,i,0) * CV_MAT_ELEM(*left,double,i,1);
			CV_MAT_ELEM(*src1,double,0,2) += CV_MAT_ELEM(*left,double,i,0);
			CV_MAT_ELEM(*src1,double,0,3) += CV_MAT_ELEM(*left,double,i,0) * CV_MAT_ELEM(*right,double,i,2);
			
			CV_MAT_ELEM(*src1,double,1,0) += CV_MAT_ELEM(*left,double,i,0) * CV_MAT_ELEM(*left,double,i,1);
			CV_MAT_ELEM(*src1,double,1,1) += CV_MAT_ELEM(*left,double,i,1) * CV_MAT_ELEM(*left,double,i,1);
			CV_MAT_ELEM(*src1,double,1,2) += CV_MAT_ELEM(*left,double,i,1);
			CV_MAT_ELEM(*src1,double,1,3) += CV_MAT_ELEM(*left,double,i,1) * CV_MAT_ELEM(*right,double,i,2);
			
			CV_MAT_ELEM(*src1,double,2,0) += CV_MAT_ELEM(*left,double,i,0);
			CV_MAT_ELEM(*src1,double,2,1) += CV_MAT_ELEM(*left,double,i,1);
			CV_MAT_ELEM(*src1,double,2,2) = NUM;
			CV_MAT_ELEM(*src1,double,2,3) += CV_MAT_ELEM(*right,double,i,2);
			
			CV_MAT_ELEM(*src1,double,3,0) += CV_MAT_ELEM(*left,double,i,0) * CV_MAT_ELEM(*right,double,i,2);
			CV_MAT_ELEM(*src1,double,3,1) += CV_MAT_ELEM(*left,double,i,1) * CV_MAT_ELEM(*right,double,i,2);
			CV_MAT_ELEM(*src1,double,3,2) += CV_MAT_ELEM(*right,double,i,2);
			CV_MAT_ELEM(*src1,double,3,3) += CV_MAT_ELEM(*right,double,i,2) * CV_MAT_ELEM(*right,double,i,2);
			
			
			
			CV_MAT_ELEM(*src2,double,0,0) += CV_MAT_ELEM(*left,double,i,0) * CV_MAT_ELEM(*left,double,i,2);
			CV_MAT_ELEM(*src2,double,1,0) += CV_MAT_ELEM(*left,double,i,1) * CV_MAT_ELEM(*left,double,i,2);
			CV_MAT_ELEM(*src2,double,2,0) += CV_MAT_ELEM(*left,double,i,2);
			CV_MAT_ELEM(*src2,double,3,0) += CV_MAT_ELEM(*left,double,i,2) * CV_MAT_ELEM(*right,double,i,2);
			

	}
	
}


int main(int argc,char **argv)
{
	int i,j;
	CvMat * left;
	CvMat * right;
	CvMat * result = cvCreateMat(4,4,CV_64FC1);
	cvSetZero(result);
	left = getMatrix("left.txt");
	right = getMatrix("right.txt");
	getCofficient1(left,right,result);
	getCofficient2(left,right,result);
	getCofficient3(left,right,result);
	CV_MAT_ELEM(*result,double,3,0) = 0;
	CV_MAT_ELEM(*result,double,3,1) = 0;
	CV_MAT_ELEM(*result,double,3,2) = 0;
	CV_MAT_ELEM(*result,double,3,3) = 1;
//	getCofficient4(left,right,result);
	
	for(i=0;i<4;i++)
	{
		for(j=0;j<4;j++)
		{
			cout<<CV_MAT_ELEM(*result,double,i,j)<<"\t";
		}
		cout<<endl;
	
	}
	//cvSave("result.xml",result);
	
	system("pause");
	return 0;

}
